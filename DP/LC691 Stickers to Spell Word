class Solution:
    def minStickers(self, stickers: List[str], target: str) -> int:
        from collections import Counter
        from functools import lru_cache

        # 把所有贴纸预处理成频率表（每个 sticker 是 Counter）
        sticker_counts = [Counter(sticker) for sticker in stickers]

        @lru_cache(None)
        def dfs(tgt: str) -> int:
            if tgt == "":
                return 0
            tcount = Counter(tgt)
            res = float('inf')

            for sticker in sticker_counts:
                # 🔍 优化：如果这个贴纸没有 target 的首字母，直接跳过
                if sticker[tgt[0]] == 0:
                    continue

                # 计算剩下要凑的部分
                new_t = ""
                for ch in tcount:
                    remain = tcount[ch] - sticker[ch]
                    if remain > 0:
                        new_t += ch * remain
                sub_res = dfs(new_t)
                if sub_res != float('inf'):
                    res = min(res, sub_res + 1)

            return res

        ans = dfs(target)
        return ans if ans != float('inf') else -1
